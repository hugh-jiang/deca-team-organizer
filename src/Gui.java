package DecaTeamOrganizer;

import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Gui Class provides Graphical User Interface for the program
 * @author Hugh Jiang
 */
public class Gui extends javax.swing.JFrame {
    // Number of columns in the main display table
    final static int NUM_TABLE_COLUMNS = 6;
    // Default status text of the filter status label
    final static String DEFAULT_FILTER_STATUS_TEXT = "Current Filters: None";
    // Default status text for search label
    final static String DEFAULT_SEARCH_STATUS_TEXT = "No Searches Active";
    
    TeamList memberList;
    boolean mainTableShowed;
    boolean editingBulk;
    
    int[] editIndexes;
    ArrayList<Member> editMembers;
    
    /**
     * Creates new form NewJFrame
     */
    public Gui() {
        // Initializes JFrame Components
        initComponents();
        
        // Create a new TeamList and import previous data in the list
        memberList = new TeamList();
        memberList.importMembers(TeamList.STORAGE_FILE);
        
        // Populate the table with imported data
        populateTable();
        
        // Set default view on program open
        hideAddMemberPanel();
        hideEditMemberPanel();
        showContainerPanel();
        
        this.setMinimumSize(new Dimension(750, 750));
        this.setExtendedState(MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        containerPanel = new javax.swing.JPanel();
        spacerPanel = new javax.swing.JPanel();
        sideMenuPanel = new javax.swing.JPanel();
        filterSubteamDropdown = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        filterSubteamLabel = new javax.swing.JLabel();
        filterButton = new javax.swing.JButton();
        resetFilters = new javax.swing.JButton();
        filterStatus = new javax.swing.JLabel();
        gradeDropdown = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jSeparator5 = new javax.swing.JSeparator();
        searchButton = new javax.swing.JButton();
        searchStatus = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        resetSearchButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        addMemberPanel = new javax.swing.JPanel();
        firstNameField = new javax.swing.JTextField();
        lastNameField = new javax.swing.JTextField();
        subteamSelector = new javax.swing.JComboBox<>();
        firstNameLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        gradeSelector = new javax.swing.JComboBox<>();
        emailField = new javax.swing.JTextField();
        emailLabel = new javax.swing.JLabel();
        addMemberButton = new javax.swing.JButton();
        subteamLabel = new javax.swing.JLabel();
        gradeLabel = new javax.swing.JLabel();
        eventLabel = new javax.swing.JLabel();
        addMemberTitle = new javax.swing.JLabel();
        warningLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        eventField = new javax.swing.JTextField();
        goBackButton = new javax.swing.JButton();
        instructionsButton = new javax.swing.JButton();
        editMemberPanel = new javax.swing.JPanel();
        editFirstNameField = new javax.swing.JTextField();
        editLastNameField = new javax.swing.JTextField();
        editSubteamSelector = new javax.swing.JComboBox<>();
        firstNameLabel1 = new javax.swing.JLabel();
        lastNameLabel1 = new javax.swing.JLabel();
        editGradeSelector = new javax.swing.JComboBox<>();
        editEmailField = new javax.swing.JTextField();
        emailLabel1 = new javax.swing.JLabel();
        editMemberButton = new javax.swing.JButton();
        subteamLabel1 = new javax.swing.JLabel();
        gradeLabel1 = new javax.swing.JLabel();
        eventLabel1 = new javax.swing.JLabel();
        editMemberTitle = new javax.swing.JLabel();
        warningLabel1 = new javax.swing.JLabel();
        cancelEditButton = new javax.swing.JButton();
        editEventField = new javax.swing.JTextField();
        editMemberInstructions = new javax.swing.JButton();
        bulkEditNotice = new javax.swing.JLabel();
        menu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exportMembersMenu = new javax.swing.JMenuItem();
        totalMembersMenuDisplay = new javax.swing.JMenuItem();
        addMembers = new javax.swing.JMenu();
        addMemberManually = new javax.swing.JMenu();
        importMembersMenu = new javax.swing.JMenuItem();
        editMemberMenu = new javax.swing.JMenu();
        editSelectedMemberMenu = new javax.swing.JMenuItem();
        deleteMemberMenu = new javax.swing.JMenu();
        deleteSelected = new javax.swing.JMenuItem();
        deleteAllMenu = new javax.swing.JMenuItem();
        sortingOptionsMenu = new javax.swing.JMenu();
        sortFirstNameMenu = new javax.swing.JMenuItem();
        sortLastNameMenu = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Import Members from CSV or TXT File");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Deca Team Organizer");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        containerPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout spacerPanelLayout = new javax.swing.GroupLayout(spacerPanel);
        spacerPanel.setLayout(spacerPanelLayout);
        spacerPanelLayout.setHorizontalGroup(
            spacerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        spacerPanelLayout.setVerticalGroup(
            spacerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 11, Short.MAX_VALUE)
        );

        containerPanel.add(spacerPanel, java.awt.BorderLayout.PAGE_START);

        sideMenuPanel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sideMenuPanel.setMinimumSize(new java.awt.Dimension(200, 100));

        filterSubteamDropdown.setBackground(new java.awt.Color(249, 249, 249));
        filterSubteamDropdown.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        filterSubteamDropdown.setModel(new DefaultComboBoxModel<String>(TeamList.SUBTEAMS));
        filterSubteamDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterSubteamDropdownActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Filter Team List By:");

        filterSubteamLabel.setText("Subteam");

        filterButton.setBackground(new java.awt.Color(220, 220, 220));
        filterButton.setText("Apply Filter(s)");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        resetFilters.setBackground(new java.awt.Color(220, 220, 220));
        resetFilters.setText("Reset All Filters and Searches");
        resetFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetFiltersActionPerformed(evt);
            }
        });

        filterStatus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        filterStatus.setForeground(new java.awt.Color(204, 51, 0));
        filterStatus.setText(DEFAULT_FILTER_STATUS_TEXT);
        filterStatus.setName(""); // NOI18N

        gradeDropdown.setBackground(new java.awt.Color(249, 249, 249));
        gradeDropdown.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gradeDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a Grade", "9", "10", "11", "12" }));
        gradeDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeDropdownActionPerformed(evt);
            }
        });

        jLabel2.setText("Grade");

        jSeparator3.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Search:");

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        jSeparator5.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator5.setForeground(new java.awt.Color(0, 0, 0));

        searchButton.setBackground(new java.awt.Color(220, 220, 220));
        searchButton.setText("Search in Current List");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchStatus.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchStatus.setForeground(new java.awt.Color(204, 51, 0));
        searchStatus.setText(DEFAULT_SEARCH_STATUS_TEXT);
        searchStatus.setName(""); // NOI18N

        jSeparator4.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator4.setForeground(new java.awt.Color(0, 0, 0));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 0));
        jLabel3.setText("<html>Note: Applying Filter will Override<br> any Existing Searches</html>");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 51, 0));
        jLabel5.setText("<html>Note: The search only searches within the filtered list. To search the entire team, reset filters before searching. Search results are sorted by relevance.</html>\n ");
        jLabel5.setToolTipText("");

        resetSearchButton.setBackground(new java.awt.Color(220, 220, 220));
        resetSearchButton.setText("Reset Search");
        resetSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSearchButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel6.setText("(by name, event ID, and email)");

        javax.swing.GroupLayout sideMenuPanelLayout = new javax.swing.GroupLayout(sideMenuPanel);
        sideMenuPanel.setLayout(sideMenuPanelLayout);
        sideMenuPanelLayout.setHorizontalGroup(
            sideMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sideMenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sideMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4)
                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchField)
                    .addComponent(filterSubteamDropdown, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gradeDropdown, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator3)
                    .addComponent(filterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator5)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(resetSearchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(sideMenuPanelLayout.createSequentialGroup()
                        .addGroup(sideMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filterSubteamLabel)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(filterStatus)
                            .addComponent(searchStatus)
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        sideMenuPanelLayout.setVerticalGroup(
            sideMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sideMenuPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(filterStatus)
                .addGap(11, 11, 11)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filterSubteamLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterSubteamDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gradeDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filterButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(1, 1, 1)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetSearchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(resetFilters)
                .addContainerGap())
        );

        containerPanel.add(sideMenuPanel, java.awt.BorderLayout.LINE_START);

        mainPanel.setLayout(new java.awt.BorderLayout());

        displayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Grade", "Subteam", "Event", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        displayTable.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(displayTable);
        displayTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        mainPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        titleLabel.setText("Current DECA Team List: ");
        jPanel4.add(titleLabel);

        mainPanel.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        containerPanel.add(mainPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(containerPanel, java.awt.BorderLayout.CENTER);

        firstNameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        firstNameField.setToolTipText("Enter the first name");
        firstNameField.setName(""); // NOI18N
        firstNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameFieldActionPerformed(evt);
            }
        });

        lastNameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lastNameField.setToolTipText("Enter the last name");

        subteamSelector.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        subteamSelector.setModel(new DefaultComboBoxModel<String>(TeamList.SUBTEAMS));

        firstNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        firstNameLabel.setText("First name *");
        firstNameLabel.setName(""); // NOI18N

        lastNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lastNameLabel.setText("Last Name *");

        gradeSelector.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        gradeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a Grade", "9", "10", "11", "12" }));
        gradeSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeSelectorActionPerformed(evt);
            }
        });

        emailField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        emailField.setToolTipText("Enter the email");

        emailLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emailLabel.setText("Member Email *");

        addMemberButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addMemberButton.setText("Add Member");
        addMemberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMemberButtonActionPerformed(evt);
            }
        });

        subteamLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        subteamLabel.setText("Subteam");
        subteamLabel.setName(""); // NOI18N

        gradeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        gradeLabel.setText("Grade *");
        gradeLabel.setName(""); // NOI18N

        eventLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        eventLabel.setText("Event ID (i.e. FTDM)");
        eventLabel.setName(""); // NOI18N

        addMemberTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        addMemberTitle.setText("Add a New Member:");

        warningLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        warningLabel.setForeground(new java.awt.Color(250, 0, 0));
        warningLabel.setText("Note: Fields marked with an asterisk * are required fields");

        cancelButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        eventField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        eventField.setToolTipText("Enter the event ID");

        goBackButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        goBackButton.setText("Go Back");
        goBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackButtonActionPerformed(evt);
            }
        });

        instructionsButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        instructionsButton.setText("Instructions");
        instructionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instructionsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addMemberPanelLayout = new javax.swing.GroupLayout(addMemberPanel);
        addMemberPanel.setLayout(addMemberPanelLayout);
        addMemberPanelLayout.setHorizontalGroup(
            addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMemberPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addMemberPanelLayout.createSequentialGroup()
                        .addGroup(addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lastNameLabel)
                            .addComponent(firstNameLabel)
                            .addComponent(firstNameField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lastNameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                            .addComponent(emailField)
                            .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(78, 78, 78)
                        .addGroup(addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eventField)
                            .addComponent(gradeSelector, 0, 175, Short.MAX_VALUE)
                            .addComponent(subteamSelector, 0, 175, Short.MAX_VALUE)
                            .addComponent(subteamLabel)
                            .addComponent(eventLabel)
                            .addComponent(gradeLabel)))
                    .addComponent(addMemberTitle)
                    .addGroup(addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(addMemberPanelLayout.createSequentialGroup()
                            .addComponent(addMemberButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(26, 26, 26)
                            .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(8, 8, 8))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addMemberPanelLayout.createSequentialGroup()
                            .addGap(58, 58, 58)
                            .addComponent(warningLabel)))
                    .addGroup(addMemberPanelLayout.createSequentialGroup()
                        .addComponent(instructionsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(goBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addMemberPanelLayout.setVerticalGroup(
            addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addMemberPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instructionsButton)
                    .addComponent(goBackButton))
                .addGap(33, 33, 33)
                .addComponent(addMemberTitle)
                .addGap(18, 18, 18)
                .addGroup(addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameLabel)
                    .addComponent(gradeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gradeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameLabel)
                    .addComponent(subteamLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subteamSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel)
                    .addComponent(eventLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eventField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(addMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addMemberButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(warningLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(addMemberPanel, java.awt.BorderLayout.CENTER);

        editFirstNameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        editFirstNameField.setToolTipText("Enter the first name");
        editFirstNameField.setName(""); // NOI18N
        editFirstNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFirstNameFieldActionPerformed(evt);
            }
        });

        editLastNameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        editLastNameField.setToolTipText("Enter the last name");

        editSubteamSelector.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        editSubteamSelector.setModel(new DefaultComboBoxModel<String>(TeamList.SUBTEAMS));

        firstNameLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        firstNameLabel1.setText("First name *");
        firstNameLabel1.setName(""); // NOI18N

        lastNameLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lastNameLabel1.setText("Last Name *");

        editGradeSelector.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        editGradeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "9", "10", "11", "12" }));
        editGradeSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGradeSelectorActionPerformed(evt);
            }
        });

        editEmailField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        editEmailField.setToolTipText("Enter the email");

        emailLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emailLabel1.setText("Member Email *");

        editMemberButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        editMemberButton.setText("Apply Edit(s)");
        editMemberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMemberButtonActionPerformed(evt);
            }
        });

        subteamLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        subteamLabel1.setText("Subteam");
        subteamLabel1.setName(""); // NOI18N

        gradeLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        gradeLabel1.setText("Grade *");
        gradeLabel1.setName(""); // NOI18N

        eventLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        eventLabel1.setText("Event ID (i.e. FTDM)");
        eventLabel1.setName(""); // NOI18N

        editMemberTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        editMemberTitle.setText("Edit Member");

        warningLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        warningLabel1.setForeground(new java.awt.Color(250, 0, 0));
        warningLabel1.setText("Note: Fields marked with an asterisk * are required fields");

        cancelEditButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cancelEditButton.setText("Cancel");
        cancelEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelEditButtonActionPerformed(evt);
            }
        });

        editEventField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        editEventField.setToolTipText("Enter the event ID");

        editMemberInstructions.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        editMemberInstructions.setText("Instructions");
        editMemberInstructions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMemberInstructionsActionPerformed(evt);
            }
        });

        bulkEditNotice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bulkEditNotice.setForeground(new java.awt.Color(255, 0, 0));
        bulkEditNotice.setText(" Note: Name, Email and Grade Editing is Disabled for Bulk Editing");

        javax.swing.GroupLayout editMemberPanelLayout = new javax.swing.GroupLayout(editMemberPanel);
        editMemberPanel.setLayout(editMemberPanelLayout);
        editMemberPanelLayout.setHorizontalGroup(
            editMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editMemberPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(editMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editMemberPanelLayout.createSequentialGroup()
                        .addGroup(editMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lastNameLabel1)
                            .addComponent(firstNameLabel1)
                            .addComponent(editFirstNameField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(editLastNameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                            .addComponent(editEmailField)
                            .addComponent(emailLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(78, 78, 78)
                        .addGroup(editMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(editEventField)
                            .addComponent(editGradeSelector, 0, 175, Short.MAX_VALUE)
                            .addComponent(editSubteamSelector, 0, 175, Short.MAX_VALUE)
                            .addComponent(subteamLabel1)
                            .addComponent(eventLabel1)
                            .addComponent(gradeLabel1)))
                    .addGroup(editMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(editMemberPanelLayout.createSequentialGroup()
                            .addComponent(editMemberButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(26, 26, 26)
                            .addComponent(cancelEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(8, 8, 8))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editMemberPanelLayout.createSequentialGroup()
                            .addGap(58, 58, 58)
                            .addComponent(warningLabel1)))
                    .addComponent(editMemberInstructions)
                    .addComponent(editMemberTitle)
                    .addComponent(bulkEditNotice))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        editMemberPanelLayout.setVerticalGroup(
            editMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editMemberPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editMemberInstructions)
                .addGap(22, 22, 22)
                .addComponent(editMemberTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bulkEditNotice)
                .addGap(14, 14, 14)
                .addGroup(editMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameLabel1)
                    .addComponent(gradeLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editFirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editGradeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(editMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameLabel1)
                    .addComponent(subteamLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editSubteamSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editLastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(editMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel1)
                    .addComponent(eventLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editEventField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(editMemberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editMemberButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(warningLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(editMemberPanel, java.awt.BorderLayout.CENTER);

        menu.setBorder(null);
        menu.setEnabled(false);
        menu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        menu.setPreferredSize(new java.awt.Dimension(59, 25));

        fileMenu.setText("File");

        exportMembersMenu.setText("Export Members");
        exportMembersMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportMembersMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exportMembersMenu);

        totalMembersMenuDisplay.setText("Total Members");
        fileMenu.add(totalMembersMenuDisplay);

        menu.add(fileMenu);

        addMembers.setText("Add ");

        addMemberManually.setText("Add Manually");
        addMemberManually.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMemberManuallyMouseClicked(evt);
            }
        });
        addMembers.add(addMemberManually);

        importMembersMenu.setText("Import Members");
        importMembersMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importMembersMenuActionPerformed(evt);
            }
        });
        addMembers.add(importMembersMenu);

        menu.add(addMembers);

        editMemberMenu.setBorder(null);
        editMemberMenu.setText("Edit ");
        editMemberMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMemberMenuActionPerformed(evt);
            }
        });

        editSelectedMemberMenu.setText("Edit Selected Member(s)");
        editSelectedMemberMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSelectedMemberMenuActionPerformed(evt);
            }
        });
        editMemberMenu.add(editSelectedMemberMenu);

        menu.add(editMemberMenu);

        deleteMemberMenu.setText("Delete ");

        deleteSelected.setText("Delete Selected Member(s)");
        deleteSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedActionPerformed(evt);
            }
        });
        deleteMemberMenu.add(deleteSelected);

        deleteAllMenu.setText("Delete All Members");
        deleteAllMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllMenuActionPerformed(evt);
            }
        });
        deleteMemberMenu.add(deleteAllMenu);

        menu.add(deleteMemberMenu);

        sortingOptionsMenu.setText("Sorting Options");

        sortFirstNameMenu.setText("Sort by First Name");
        sortFirstNameMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortFirstNameMenuActionPerformed(evt);
            }
        });
        sortingOptionsMenu.add(sortFirstNameMenu);

        sortLastNameMenu.setText("Sort by Last Name");
        sortLastNameMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortLastNameMenuActionPerformed(evt);
            }
        });
        sortingOptionsMenu.add(sortLastNameMenu);

        menu.add(sortingOptionsMenu);

        setJMenuBar(menu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gradeSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeSelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gradeSelectorActionPerformed
    
    /**
     * Populate main display table with the full team list
     */
    public void populateTable() {
        populateTable(memberList.getMembers());
        
        // Set boolean flag to indicate main table is showed
        mainTableShowed = true;
    }
    
    /**
     * Populate main display table with specified ArrayList of Members: this method overloads populateTable().
     * @param memberArr the ArrayList of Members that is to be added to the table
     */
    public void populateTable(ArrayList<Member> memberArr) {
        
        // Set boolean flag
        mainTableShowed = false;
        
        DefaultTableModel model = (DefaultTableModel) displayTable.getModel();
        
        // Remove all existing elements on table
        model.getDataVector().removeAllElements();
        
        String[] rowData = new String[NUM_TABLE_COLUMNS];
        
        Member temp;
        
        for (int i = 0; i < memberArr.size(); i++) {
            temp = memberArr.get(i);
            rowData[0] = temp.getFirstName();
            rowData[1] = temp.getLastname();
            rowData[2] = String.valueOf(temp.getGrade());
            rowData[3] = "" + temp.getSubteam();
            rowData[4] = "" + temp.getEventID();
            rowData[5] = temp.getEmail();
            
            model.addRow(rowData);
        }
        
        // Reset any previous selections
        displayTable.clearSelection();
        
        // Reset gui to show the updated table
        revalidate();
        repaint();
    }
    
    private void hideContainerPanel() {
        remove(containerPanel);
        containerPanel.setVisible(false);
        revalidate();
        repaint();
    }
    
    private void showContainerPanel() {
        add(containerPanel, java.awt.BorderLayout.CENTER);
        containerPanel.setVisible(true);
        menu.setVisible(true);
        
        // Rest filter and status text
        filterStatus.setText(DEFAULT_FILTER_STATUS_TEXT);
        memberList.resetFilters();
        
        // Reset search box text and status text
        searchField.setText("");
        searchStatus.setText(DEFAULT_SEARCH_STATUS_TEXT);
        
        // Populate table with list of all members
        populateTable();
        mainTableShowed = true;
        
        // Set total members display
        totalMembersMenuDisplay.setText("Total Members: " + memberList.getNumMembers());
        
        revalidate();
        repaint();
    }
    
    private void hideEditMemberPanel() {
        remove(editMemberPanel);
        editMemberPanel.setVisible(false);
        menu.setVisible(true);
        revalidate();
        repaint();
    }
    
    private void showEditMemberPanel() {
        // If we are editing bulk members, disallow editing of name, email, and grade. Allow bulk editing of suteam or event
        if (editingBulk) {
            // Set header title
            editMemberTitle.setText("Bulk Edit Selected Members");
            bulkEditNotice.setVisible(true);

            // Hide fields that will not be bulk editable
            editFirstNameField.setVisible(false);
            editLastNameField.setVisible(false);
            editEmailField.setVisible(false);
            editGradeSelector.setVisible(false);

            // Set defaults for text fields and combobox
            editEventField.setText("");
            editSubteamSelector.setSelectedIndex(0);
        } 
        // Else, if we are editing one member at a time, allow editing of any Member field
        else {
            
            Member m;
            
            // Retrieve the correct member based on whether we are using the index selection or member
            if (mainTableShowed) {
                m = memberList.get(editIndexes[0]);
            }
            else {
                m = editMembers.get(0);
            }
            
            // Set header title
            editMemberTitle.setText("Edit Member");
            bulkEditNotice.setVisible(false);

            // Display all editable fields
            editFirstNameField.setVisible(true);
            editLastNameField.setVisible(true);
            editEmailField.setVisible(true);
            editGradeSelector.setVisible(true);

            // Set text for the fields to match the edited member's state
            editFirstNameField.setText(m.getFirstName());
            editLastNameField.setText(m.getLastname());
            editEmailField.setText(m.getEmail());
            editEventField.setText(m.getEventID());

            // Set selected index for the combobox (dropdown selectors)
            editGradeSelector.setSelectedIndex(m.getGrade() - 9);
            // Find and assign the appropriate index for the Subteam Selector
            for (int i = 0; i < TeamList.SUBTEAMS.length; i++) {
                if (m.getSubteam().equals(TeamList.SUBTEAMS[i]) || m.getSubteam().equals("")) {
                    editSubteamSelector.setSelectedIndex(i);
                    break;
                }
            }
        }
        
        add(editMemberPanel);
        editMemberPanel.setVisible(true);
        menu.setVisible(false);
    }
    
    /**
     * Method to hide the AddMemberPanel JPanel
     */
    private void hideAddMemberPanel() {
        remove(addMemberPanel);
        addMemberPanel.setVisible(false);
        menu.setVisible(true);
        revalidate();
        repaint();
        resetAddMemberPanel();
    }
    
    /**
     * Method to show the AddMemberPanel JPanel
     */
    private void showAddMemberPanel() {
        add(addMemberPanel, java.awt.BorderLayout.CENTER);
        addMemberPanel.setVisible(true);
        menu.setVisible(false);
        
        revalidate();
        repaint();
    }
    
    /**
     * Method to reset selections in the add member panel
     */
    private void resetAddMemberPanel() {
        firstNameField.setText("");
        lastNameField.setText("");
        emailField.setText("");
        eventField.setText("");
        gradeSelector.setSelectedIndex(0);
        subteamSelector.setSelectedIndex(0);
    }
    
    /**
     * Upon clicking the "Add Member" button, check if the entry is valid. If valid, add the member to the team list
     * @param evt ActionEvent for button click
     */
    private void addMemberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMemberButtonActionPerformed
        String fName = firstNameField.getText().trim();
        String lName = lastNameField.getText().trim();
        String email = emailField.getText().trim().toLowerCase();
        String event = eventField.getText().toUpperCase().trim();
        int grade = 0;
        String subteam = "";
        
        boolean valid = true;
        
        // Check if grade is entered
        if (gradeSelector.getSelectedIndex() == 0) {
            valid = false;
        }
        else {
            grade = gradeSelector.getSelectedIndex() + 8;
        }
        
        // Check if required text fields are entered
        if (fName.equals("") || lName.equals("") || email.equals("")) {
            valid = false;
        }
        else {
            // Capitalize first and last names
            fName = fName.toUpperCase().charAt(0) + "" + fName.substring(1).toLowerCase();
            lName = lName.toUpperCase().charAt(0) + "" + lName.substring(1).toLowerCase();
        }
        
        // Set subteam
        if (subteamSelector.getSelectedIndex() != 0 && subteamSelector.getSelectedIndex() != (TeamList.SUBTEAMS.length-1)) {
            subteam = subteamSelector.getSelectedItem().toString();
        }
        
        // If Member entry is valid
        if (valid) {
            // Add member to team, then show success message
            memberList.addMember(new Member(fName, lName, email, grade, subteam, event));
            JOptionPane.showMessageDialog(null, "Successfully added " + fName + " " + lName, "Success", JOptionPane.INFORMATION_MESSAGE);
            
            // Reset fields and selections
            resetAddMemberPanel();
            
            // Populate table
            populateTable();
        } 
        else {
            // Error message if entry is invalid
            JOptionPane.showMessageDialog(null, "You forgot to enter some required information. Please try again.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addMemberButtonActionPerformed

    private void firstNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameFieldActionPerformed

    private void instructionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instructionsButtonActionPerformed
        // Instructions for adding a member
        JOptionPane.showMessageDialog(null, "Enter the information regarding the member you would like to add to the team.\nPlease enter the event ID as the abbreviated form (i.e. FTDM, PMK, etc).\nFields marked with an asterisk must be completed to add the member.\nFields without an asterisk can be left as default and can be edited later.", "Instructions", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_instructionsButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // Cancel adding a member
        if (JOptionPane.showConfirmDialog(null, "Unsaved Changes will be Lost. Would you still like to cancel?", "Cancel Adding Member", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
            hideAddMemberPanel();
            showContainerPanel();
	}
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void goBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackButtonActionPerformed
        // Cancel adding a member (second button)
        if (JOptionPane.showConfirmDialog(null, "Unsaved Changes will be Lost. Would you still like to go back?", "Go Back", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
            hideAddMemberPanel();
            showContainerPanel();
	}
    }//GEN-LAST:event_goBackButtonActionPerformed

    private void addMemberManuallyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMemberManuallyMouseClicked
        // Show panel to add members
        hideContainerPanel();
        showAddMemberPanel();
    }//GEN-LAST:event_addMemberManuallyMouseClicked

    /**
     * When gui window is closed, export existing members to a storage file so they will be available when the program is opened again
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.out.println("Closing Program");
        memberList.exportMembers();
        System.out.println("Export successful");
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void filterSubteamDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterSubteamDropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filterSubteamDropdownActionPerformed
    
    // Filter and display members when the button filterButton is clicked 
    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        // Upon clicking of the filter button
        String subteam ="";
        int grade = 0;
        String statusText = "<html>Filtered By:";
        boolean filtered = false;
        
        // Reset previous (if any) filters stored in the memberList object
        memberList.resetFilters();
        
        // Reset search fields
        searchStatus.setText(DEFAULT_SEARCH_STATUS_TEXT);
        searchField.setText("");
        
        // Get selected subteam from GUi
        if (filterSubteamDropdown.getSelectedIndex() != 0) {
            // Filter processing
            subteam = filterSubteamDropdown.getSelectedItem().toString();
            memberList.filterBySubteam(subteam);
            // Update status text
            statusText = statusText + "<br>Subteam: " + subteam;
            // Reset filter dropdown to default
            filterSubteamDropdown.setSelectedIndex(0);
            
            // Boolean flag
            filtered = true;
        }
        
        // Get selected grade from GUI
        if (gradeDropdown.getSelectedIndex() != 0) {
            // Since grades are set as {none, 9, 10, 11, 12}, the grade is the index + 8
            grade = gradeDropdown.getSelectedIndex() + 8;
            memberList.filterByGrade(grade);
            statusText = statusText + "<br>Grade: " + grade;
            gradeDropdown.setSelectedIndex(0);
            
            // boolean flag
            filtered = true;
        }
        
        // Check if filter was successful
        if (filtered) {
            // Close html tag in label and then set the status text
            statusText = statusText + "</html>";
            filterStatus.setText(statusText);
            
            // Set boolean flag to indicate the filtered list is being shown
            mainTableShowed = false;
            
            // Populate the table with the filtered list
            populateTable(memberList.getFilteredList());
        }
        // Else, if no filters were selected, handle error
        else {
            JOptionPane.showMessageDialog(null, "No filters were selected", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_filterButtonActionPerformed

    
    private void resetFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetFiltersActionPerformed
        // Set status text
        filterStatus.setText(DEFAULT_FILTER_STATUS_TEXT);
        searchStatus.setText(DEFAULT_SEARCH_STATUS_TEXT);
        
        // Populate table with all members
        populateTable();

        // reset any selections on the table
        displayTable.clearSelection();
        
        // Reset filters in memberList object (instance of TeamList Class)
        memberList.resetFilters();
        
        // Reset search box text
        searchField.setText("");
    }//GEN-LAST:event_resetFiltersActionPerformed

    private void gradeDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeDropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gradeDropdownActionPerformed

    private void deleteAllMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllMenuActionPerformed
        // Delete all members
        if (JOptionPane.showConfirmDialog(null, "This action is irreversible. Are you sure you would like to delete all members from the team?", 
                "WARNING: Deleting All Members", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
            memberList.deleteAll();
            memberList.exportMembers();
            memberList.importMembers(TeamList.STORAGE_FILE);
            populateTable();

        }
    }//GEN-LAST:event_deleteAllMenuActionPerformed
    
    /**
     * Method for deleting selected members from the table upon clicking of the "delete selected members" menu item
     * @param evt 
     */
    private void deleteSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedActionPerformed
        String deleted = "";
        String failed = "";
        
        // First check if there is a row selection on the table
        if (!displayTable.getSelectionModel().isSelectionEmpty()) {
            
            // If row(s) are selected in the table, ask for confirmation that the user would like to delete the members
            if (JOptionPane.showConfirmDialog(null, "This action is irreversible. Would you like to delete the selected member(s) from the team?", 
                    "WARNING: Deleting Selected Member(s)", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                
                // If user would like to delete members, get the indexes of the selected table rows to delete
                int[] rowsSelected = displayTable.getSelectedRows();
                
                // If the current table is displaying the full team list, delete the members by index in the main TeamList ArrayList
                if (mainTableShowed) {
                    
                    String tempFirstLastName;
                    
                    // Delete the selected members
                    for (int i = 0; i < rowsSelected.length; i++) {
                        // Store the full name of the member to be deleted
                        tempFirstLastName = displayTable.getModel().getValueAt(rowsSelected[i], 0).toString() + " " 
                                + displayTable.getModel().getValueAt(rowsSelected[i], 1).toString();
                        
                        // deleteMember(int indexToDelete) deletes specified member and returns true if member was deleted successfully
                        // note that the index of the deleted member must be decremented by i because for every member deleted, the sorted array shifts left by 1
                        if(memberList.deleteMember(rowsSelected[i]-i)) {
                            // Record members that were deleted successfully
                            deleted = deleted + " | " + tempFirstLastName + " |";
                        }
                        else {
                            // Record members that couldn't be deleted (this shouldn't ever happen)
                            failed = failed + " | " + tempFirstLastName + " |";
                        }
                    }
                }
                // If the current table is not displaying the full team list (and is instead displaying a filtered list), 
                // then the members will have to be deleted by searching for the member and then deleting using TeamList class's deleteMember(Member m) method
                else {
                    
                    String fname, lname, email, subteam, event;
                    int grade;
                    
                    for (int i = 0; i < rowsSelected.length; i++) {

                        fname = displayTable.getModel().getValueAt(rowsSelected[i], 0).toString();
                        lname = displayTable.getModel().getValueAt(rowsSelected[i], 1).toString();
                        grade = Integer.valueOf(displayTable.getModel().getValueAt(rowsSelected[i], 2).toString());
                        subteam = displayTable.getModel().getValueAt(rowsSelected[i], 3).toString();
                        event = displayTable.getModel().getValueAt(rowsSelected[i], 4).toString();
                        email = displayTable.getModel().getValueAt(rowsSelected[i], 5).toString();

                        // Update list of deleted members / members that failed to delete
                        if(memberList.deleteMember(new Member (fname, lname, email, grade, subteam, event))) {
                            deleted = deleted + " | " + fname + " " + lname + " |";
                        }
                        else {
                            failed = failed + " |" + fname + " " + lname + " |";
                        }
                    }
                }
                
                // Show message of who was deleted
                if (failed.equals("")) {
                    // Normal info message that shows the deleted members
                    JOptionPane.showMessageDialog(null, "Successfully deleted these members: " + deleted, "Deleted Information", JOptionPane.INFORMATION_MESSAGE);
                } 
                else {
                    // Error handling: if a member isn't found, show error
                    JOptionPane.showMessageDialog(null, "Successfully deleted these members: " + deleted + "\n However, failed to delete these members: ", 
                            "Critical Error", JOptionPane.INFORMATION_MESSAGE);
                }

                // Reset container panel
                showContainerPanel();
            }
        }
        // Error handling: If no table rows were selected, display error message
        else {
            JOptionPane.showMessageDialog(null, "You must select the Member(s) you would like to delete from the table.\nTo select a Member, click the "
                    + "Member's name on the table displayed below.\nYou can also hold \"Control\" or \"Command\" while clicking to select multiple members.", 
                    "ERROR: No Members Selected", JOptionPane.ERROR_MESSAGE);
        }
        
        // clear any existing table selections
        displayTable.clearSelection();
    }//GEN-LAST:event_deleteSelectedActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed
    
    
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // Action listener for search button
        String query = searchField.getText().trim();
        String searchText = "Searched: " + query;
        
        // Make sure the query meets minimum length requirements
        if (query.length() >= TeamList.MIN_SEARCH_QUERY_LENGTH) {
            searchStatus.setText(searchText);
            
            populateTable(memberList.getSearch(query));
        }
        else {
            // Error handling, if no search query was entered
            JOptionPane.showMessageDialog(null, "The search query must be at least " + TeamList.MIN_SEARCH_QUERY_LENGTH + " characters long.", "Error: Query Too Short", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void sortFirstNameMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortFirstNameMenuActionPerformed
        // Sort member by first name
        memberList.setSortByFirstName(true);
        memberList.sort();
        showContainerPanel();
        JOptionPane.showMessageDialog(null, "Members will be sorted by first name alphabetically", "Sorting Option Changed", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_sortFirstNameMenuActionPerformed

    private void sortLastNameMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortLastNameMenuActionPerformed
        // TODO add your handling code here:
        memberList.setSortByFirstName(false);
        memberList.sort();
        showContainerPanel();
        JOptionPane.showMessageDialog(null, "Members will be sorted by last name alphabetically", "Sorting Option Changed", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_sortLastNameMenuActionPerformed

    
    private void editMemberMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMemberMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editMemberMenuActionPerformed

    private void editSelectedMemberMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSelectedMemberMenuActionPerformed
        // Edit Selected Member(s)
        editingBulk = false;
        
        // Reset ArrayList that holds members to be edited
        // array holding indexes will automatically be re-initialized later in this method, so no need to reset
        editMembers = new ArrayList<>();
        
        // Make sure rows are selected in the table. If not, display error message (else part)
        if (!displayTable.getSelectionModel().isSelectionEmpty()) {
            
            // Retrieve the rows selected
            editIndexes = displayTable.getSelectedRows();
            
            // Boolean variable to check if multiple rows are selected
            editingBulk = editIndexes.length > 1;
            
            // If members were selected from the main table, add them to the editMembers arraylist using direct index access
            if (mainTableShowed) {
                for (int i = 0; i < editIndexes.length; i++) {
                    editMembers.add(memberList.get(editIndexes[i]));
                }
            }
            // else, if members were not added from the main table, we have to add members to the editMembers arraylist by creating new member objects
            else {
                String fname, lname, email, subteam, event;
                int grade;
                
                for (int i = 0; i < editIndexes.length; i++) {
                    fname = displayTable.getModel().getValueAt(editIndexes[i], 0).toString();
                    lname = displayTable.getModel().getValueAt(editIndexes[i], 1).toString();
                    grade = Integer.valueOf(displayTable.getModel().getValueAt(editIndexes[i], 2).toString());
                    subteam = displayTable.getModel().getValueAt(editIndexes[i], 3).toString();
                    event = displayTable.getModel().getValueAt(editIndexes[i], 4).toString();
                    email = displayTable.getModel().getValueAt(editIndexes[i], 5).toString();
                    editMembers.add(new Member(fname, lname, email, grade, subteam, event));
                }
            }
            
            hideContainerPanel();
            showEditMemberPanel();
        }
        else {
            // Error handling: If no table rows were selected, display error message
            JOptionPane.showMessageDialog(null, "You must select the Member(s) you would like to edit.\nTo select a Member, click the Member's name on the table displayed below.\nYou can also hold \"Control\" or \"Command\" while clicking to select multiple members.", "ERROR: No Members Selected", JOptionPane.ERROR_MESSAGE);
        }
        
        // clear any existing table selections
        displayTable.clearSelection();
    }//GEN-LAST:event_editSelectedMemberMenuActionPerformed

    private void editFirstNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFirstNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editFirstNameFieldActionPerformed

    private void editGradeSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGradeSelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editGradeSelectorActionPerformed

    private void editMemberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMemberButtonActionPerformed
        // Edit Member Button
        
        String fName;
        String lName;
        String email;
        String event;
        int grade;
        String subteam = "";
        
        // If editing one member only
        if (!editingBulk) {
            boolean valid = true;
            
            // Set values for member fields
            fName = editFirstNameField.getText().trim();
            lName = editLastNameField.getText().trim();
            email = editEmailField.getText().trim().toLowerCase();
            event = editEventField.getText().toUpperCase().trim();
            grade = editGradeSelector.getSelectedIndex() + 9;
            
            // Set subteam
            if (editSubteamSelector.getSelectedIndex() != 0 && editSubteamSelector.getSelectedIndex() != (TeamList.SUBTEAMS.length-1)) {
                subteam = editSubteamSelector.getSelectedItem().toString();
            }
            
            // Check if required text fields are entered
            if (fName.equals("") || lName.equals("") || email.equals("")) {
                valid = false;
            }
            else {
                // Capitalize first and last names
                fName = fName.toUpperCase().charAt(0) + "" + fName.substring(1).toLowerCase();
                lName = lName.toUpperCase().charAt(0) + "" + lName.substring(1).toLowerCase();
            }

            // If Member entry is valid
            if (valid) {
                // Delete the original member, then add the new edited member
                memberList.deleteMember(editMembers.get(0));
                memberList.addMember(new Member(fName, lName, email, grade, subteam, event));
                
                JOptionPane.showMessageDialog(null, "Successfully edited " + fName + " " + lName, "Success", JOptionPane.INFORMATION_MESSAGE);
            } 
            else {
                // Error message if entry is invalid
                JOptionPane.showMessageDialog(null, "You forgot to enter some required information. Please try again.", "ERROR", JOptionPane.ERROR_MESSAGE);
            } 
        }
        // If editing bulk members
        else {
            
            // Set values for the bulk edit fields
            event = editEventField.getText().trim().toUpperCase();
            subteam = "";
            
            // Set subteam if it is selected. If none is selected, leave as empty String
            if (editSubteamSelector.getSelectedIndex() != 0 && editSubteamSelector.getSelectedIndex() != (TeamList.SUBTEAMS.length-1)) {
                subteam = editSubteamSelector.getSelectedItem().toString();
            }
            
            for (int i = 0; i < editMembers.size(); i++) {
                // Set original values for member fields which are not editable by bulk
                fName = editMembers.get(i).getFirstName();
                lName = editMembers.get(i).getLastname();
                email = editMembers.get(i).getEmail();
                grade = editMembers.get(i).getGrade();
                
                memberList.deleteMember(editMembers.get(i));
                memberList.addMember(new Member(fName, lName, email, grade, subteam, event));
            }
        }
        
        // hide edit member options and show default view (main container panel)
        hideEditMemberPanel();
        showContainerPanel();
        
    }//GEN-LAST:event_editMemberButtonActionPerformed

    private void cancelEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelEditButtonActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Unsaved Changes will be Lost. Would you still like to cancel?", "Cancel Editing", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
            hideEditMemberPanel();
            showContainerPanel();
	}
    }//GEN-LAST:event_cancelEditButtonActionPerformed

    private void editMemberInstructionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMemberInstructionsActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Enter the information regarding the member you would like to edit.\nPlease enter the event ID as the abbreviated form (i.e. FTDM, PMK, etc).\nNote that bulk editing names or emails is unavailable, but grade, subteam, and event ID can be edited for multiple members at once.", "Instructions", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_editMemberInstructionsActionPerformed
    
    /**
     * Reset search display table upon clicking of the Reset Search button
     * @param evt 
     */
    private void resetSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSearchButtonActionPerformed
        // TODO add your handling code here:
        searchField.setText("");
        searchStatus.setText(DEFAULT_SEARCH_STATUS_TEXT);
        populateTable(memberList.getFilteredList());
    }//GEN-LAST:event_resetSearchButtonActionPerformed

    // Action Listener for importing members, adapted from https://netbeans.apache.org//kb/docs/java/gui-filechooser.html
    private void importMembersMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importMembersMenuActionPerformed
        String[] importOptions = {"Override Existing Members", "Keep Existing Members"};
        int choice = 0;
        choice = JOptionPane.showOptionDialog(null, "Do you want this import to override existing members on the team list?"
                + "\nBy default, existing members will be overridden", "Import File Options", JOptionPane.DEFAULT_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, null, importOptions, importOptions[0]);
        
        // Open file chooser
        int returnVal = fileChooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            
            // If user chose to delete existing members on import, delete members before importing file
            if (choice == 0) {
                memberList.deleteAll();
            }
            
            // Import members
            memberList.importMembers(fileChooser.getSelectedFile().toString());
            
            // Populate the table with imported data
            populateTable();

            // Set default view
            hideAddMemberPanel();
            hideEditMemberPanel();
            showContainerPanel();
            
            JOptionPane.showMessageDialog(null, "Successfully imported members from " + fileChooser.getSelectedFile().toString(), 
                    "Successfully Imported", JOptionPane.INFORMATION_MESSAGE);
            
        } else {
            JOptionPane.showMessageDialog(null, "File import cancelled by user", "Failed to Import", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_importMembersMenuActionPerformed

    private void exportMembersMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMembersMenuActionPerformed
        // Show window detailing instructions fo retrieving the exported file
        JOptionPane.showMessageDialog(null, "To export the team list, close the program and visit the program folder.\nA file called " + TeamList.STORAGE_FILE + " will store the exported team.\nCopy the file to your desired file location. Do not delete the original file.\nDeleting the original file will delete all members from the team list.", "Export Members", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_exportMembersMenuActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMemberButton;
    private javax.swing.JMenu addMemberManually;
    private javax.swing.JPanel addMemberPanel;
    private javax.swing.JLabel addMemberTitle;
    private javax.swing.JMenu addMembers;
    private javax.swing.JLabel bulkEditNotice;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton cancelEditButton;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JMenuItem deleteAllMenu;
    private javax.swing.JMenu deleteMemberMenu;
    private javax.swing.JMenuItem deleteSelected;
    private javax.swing.JTable displayTable;
    private javax.swing.JTextField editEmailField;
    private javax.swing.JTextField editEventField;
    private javax.swing.JTextField editFirstNameField;
    private javax.swing.JComboBox<String> editGradeSelector;
    private javax.swing.JTextField editLastNameField;
    private javax.swing.JButton editMemberButton;
    private javax.swing.JButton editMemberInstructions;
    private javax.swing.JMenu editMemberMenu;
    private javax.swing.JPanel editMemberPanel;
    private javax.swing.JLabel editMemberTitle;
    private javax.swing.JMenuItem editSelectedMemberMenu;
    private javax.swing.JComboBox<String> editSubteamSelector;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel emailLabel1;
    private javax.swing.JTextField eventField;
    private javax.swing.JLabel eventLabel;
    private javax.swing.JLabel eventLabel1;
    private javax.swing.JMenuItem exportMembersMenu;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton filterButton;
    private javax.swing.JLabel filterStatus;
    private javax.swing.JComboBox<String> filterSubteamDropdown;
    private javax.swing.JLabel filterSubteamLabel;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JLabel firstNameLabel1;
    private javax.swing.JButton goBackButton;
    private javax.swing.JComboBox<String> gradeDropdown;
    private javax.swing.JLabel gradeLabel;
    private javax.swing.JLabel gradeLabel1;
    private javax.swing.JComboBox<String> gradeSelector;
    private javax.swing.JMenuItem importMembersMenu;
    private javax.swing.JButton instructionsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JLabel lastNameLabel1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menu;
    private javax.swing.JButton resetFilters;
    private javax.swing.JButton resetSearchButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchStatus;
    private javax.swing.JPanel sideMenuPanel;
    private javax.swing.JMenuItem sortFirstNameMenu;
    private javax.swing.JMenuItem sortLastNameMenu;
    private javax.swing.JMenu sortingOptionsMenu;
    private javax.swing.JPanel spacerPanel;
    private javax.swing.JLabel subteamLabel;
    private javax.swing.JLabel subteamLabel1;
    private javax.swing.JComboBox<String> subteamSelector;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JMenuItem totalMembersMenuDisplay;
    private javax.swing.JLabel warningLabel;
    private javax.swing.JLabel warningLabel1;
    // End of variables declaration//GEN-END:variables
}
